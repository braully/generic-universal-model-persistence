//
// This file was generated by the JPA Modeler
//
/* MIT License
* 
* Copyright (c) 2021 Braully Rocha
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

package io.github.braully.domain;

import io.github.braully.util.logutil;
import io.github.braully.constant.Attr;
import io.github.braully.util.UtilDate;
import io.github.braully.util.UtilValidation;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.persistence.Basic;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import lombok.Getter;
import lombok.Setter;

@Entity
@Table(schema = "sale")
@Getter
@Setter
public class PurchaseOrder extends AbstractAuditableEntity
        implements Serializable, IOrganiztionEntityDependent {

    @ManyToOne(targetEntity = Inventory.class)
    protected Inventory inventory;

    @ManyToOne
    protected Organization organization;

    @Basic
    protected String description;

    @ManyToOne(targetEntity = Partner.class)
    protected Partner partner;

    @Basic
    protected String invoiceFiscalCode;

    @Basic
    protected String type;

    @Basic
    protected String statusType;

    @OneToMany(mappedBy = "purchaseOrder")
    protected Set<PurchaseOrderItem> itens;

    @Basic
    @Temporal(TemporalType.TIMESTAMP)
    protected Date dateOrder;

    @Basic
    protected Date dateExpire;

    @Basic
    protected BigDecimal total;

    @ManyToOne(targetEntity = AccountTransaction.class)
    protected AccountTransaction accountTransaction;

    @ManyToOne(fetch = FetchType.LAZY)//(cascade = CascadeType.ALL)
    protected InfoExtra infoExtra;

    @Attr("hidden")
    @ManyToOne(fetch = FetchType.LAZY)
    protected BinaryFile contract;

    public PurchaseOrder() {

    }

    @Override
    protected String preToString() {
        StringBuilder sb = new StringBuilder();
        sb.append(type);
        if (UtilValidation.isStringValid(this.description)) {
            sb.append(": ").append(description);
        }
        return sb.toString();
    }

    @Override
    public String posToString() {
        StringBuilder sb = new StringBuilder();
        try {
            if (dateOrder != null) {
                sb.append(" ");
                sb.append(UtilDate.formatData(dateOrder));
            }
            if (total != null) {
                sb.append(" ");
                sb.append(Money.formatar(total));
            }
        } catch (Exception e) {
        }
        return sb.toString();
    }

    public Map<String, Long> getExtraNumberValues() {
        return getInfoExtraNullSafe().getExtraNumberValues();
    }

    public Map<String, String> getExtraStringValues() {
        return getInfoExtraNullSafe().getExtraStringValues();
    }

    InfoExtra getInfoExtraNullSafe() {
        if (this.infoExtra == null) {
            this.infoExtra = new InfoExtra();
        }
        return infoExtra;
    }

    public void setDateOrderIfNull(Date date) {
        if (this.dateOrder == null) {
            this.dateOrder = date;
        }
    }

    public void setAccountTransactionIfNull(AccountTransaction transacaoGerada) {
        if (this.accountTransaction == null) {
            this.accountTransaction = transacaoGerada;
        }
    }

    public Map<String, Object> getMapAllProps() {
        Map<String, Object> map = new HashMap<>();
        map.putAll(cache().map);
        try {
            if (infoExtra != null) {
                map.putAll(infoExtra.getMapAllProps());
            }
        } catch (Exception e) {
            logutil.error("Fail map all properties", e);
        }
        return map;
    }

    public void setInfoExtraSeNull(InfoExtra entity) {
        if (this.infoExtra == null) {
            this.infoExtra = entity;
        }
    }
}
