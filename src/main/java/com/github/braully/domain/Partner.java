//
// This file was generated by the JPA Modeler
//
/* MIT License
* 
* Copyright (c) 2021 Braully Rocha
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

package com.github.braully.domain;

import com.github.braully.persistence.ILightRemoveEntity;
import com.github.braully.constant.Attr;
import com.github.braully.persistence.IMigrableEntity;
import com.github.braully.util.UtilDate;
import com.github.braully.util.UtilString;
import java.io.Serializable;
import java.util.Date;
import java.util.Set;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.DiscriminatorColumn;
import javax.persistence.DiscriminatorType;
import javax.persistence.DiscriminatorValue;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import static javax.persistence.TemporalType.DATE;
import javax.persistence.UniqueConstraint;
import lombok.Getter;
import lombok.Setter;
//import org.apache.commons.lang3.StringUtils;
//import org.hibernate.annotations.Where;

@Setter
@Getter
@Entity
@Table(uniqueConstraints = @UniqueConstraint(name = "uk_partner.fiscal_code", columnNames = {
    "fiscalCode"}), schema = "base")
@DiscriminatorColumn(discriminatorType = DiscriminatorType.INTEGER, name = "type_id", columnDefinition = "smallint default '0'", length = 1)
//@Where(clause = "removed = false") // jpa hibernate soft delete
@DiscriminatorValue("0")
public class Partner extends AbstractGlobalEntity
        implements Serializable, IMigrableEntity, INameComparable, ILightRemoveEntity {

    @Basic(optional = false)
    protected String name;

    @Basic
    protected String phoneticName;

    @Column(unique = true)
    @Basic
    protected String fiscalCode;

    @Basic
    protected String attribute;

    @Attr("hidden")
    @ManyToOne(fetch = FetchType.LAZY) // (cascade = CascadeType.ALL)
    protected InfoExtra infoExtra;

    @ManyToOne(cascade = CascadeType.ALL)
    protected Contact contact;

    // TODO: Move to infoExtra
    @Basic
    @Temporal(DATE)
    protected Date birthDate;
    // TODO: Importante s√≥ para motivos contratuais, tirar daqui
    @ManyToOne
    protected City birthCity;

    @Attr("hidden")
    @ManyToMany(mappedBy = "partnerTarget", fetch = FetchType.LAZY, targetEntity = PartnerPartner.class)
    protected Set<PartnerPartner> partners;

    @Column(unique = true)
    @Basic
    @Attr("hidden")
    protected String uniqueCode;

    @Attr("hidden")
    @Basic
    @Column(columnDefinition = "boolean DEFAULT false", insertable = false)
    protected Boolean removed = false;

    public Partner() {

    }

    //Necessary evil: update base.partner set name = initcap(name) where name ~ '[A-Z][A-Z]';
    // Capitalize name 
    //FIXME: Remove befor publication
    public void setName(String name) {
        name = UtilString.capitalize(name);
        this.name = name;
    }

    public Address getAddress() {
        return this.contact.getMainAddress();
    }

    public void setAddress(Address address) {
        this.contact.add(address);
    }

    public InfoExtra getInfoExtra() {
        return infoExtra;
    }

    public void setInfoExtra(InfoExtra infoExtra) {
        this.infoExtra = infoExtra;
    }

    public void setContactSeNull(Contact contact) {
        if (this.contact == null) {
            this.contact = contact;
        }
    }

    public void setInfoExtraSeNull(InfoExtra infoExtra) {
        if (this.infoExtra == null) {
            this.infoExtra = infoExtra;
        }
    }

    public String getNome() {
        return name;
    }

    public void setNome(String nome) {
        this.name = nome;
    }

    @Override
    public String toString() {
        return name + (this.fiscalCode != null ? " (" + this.fiscalCode + ")" : "");
    }

    @Override
    public String toStringDetailed() {
        String detalhes = UtilString.emptyIfNull(this.fiscalCode) + " nascimento "
                + UtilDate.formatData(birthDate)
                + " " + UtilString.emptyIfNull(birthCity);
        return name + " (" + detalhes + ")";
    }

    public void setNumeroComprovantePessoa(String fiscalCode) {
        this.fiscalCode = fiscalCode;
    }

    public void setDataNascimento(Date dataNascimento) {
        this.birthDate = dataNascimento;
    }

    public void setNaturalidade(City nat) {
        this.birthCity = nat;
    }

    public Set<Phone> getTelefones() {
        return this.contact.extraPhones;
    }

    public Contact contact() {
        if (this.contact == null) {
            this.contact = new Contact();
        }
        return this.contact;
    }

    public InfoExtra infoExtra() {
        if (this.infoExtra == null) {
            this.infoExtra = new InfoExtra();
        }
        return this.infoExtra;
    }

    // @Override
    public void setEmail(String email) {
        this.contact().getMainEmail().setValue(email);
    }

    // @Override
    public String getEmail() {
        return this.contact().mains().getMainEmail().getValue();
    }

    // For not problem with unique constraint uk_fiscal_code
    public void setFiscalCode(String fiscalCode) {
        this.fiscalCode = fiscalCode;
        if (fiscalCode != null && fiscalCode.trim().isEmpty()) {
            this.fiscalCode = null;
        }
    }

    public String getFiscalCodeClean() {
        String ret = fiscalCode;
        if (ret != null) {
            ret = ret.replaceAll("\\D", "");
        }
        return ret;
    }
}
