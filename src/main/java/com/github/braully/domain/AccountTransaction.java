//
// This file was generated by the JPA Modeler
//
/* MIT License
* 
* Copyright (c) 2021 Braully Rocha
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

package com.github.braully.domain;

import com.github.braully.util.logutil;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.Set;
import javax.persistence.Basic;
import javax.persistence.DiscriminatorColumn;
import javax.persistence.DiscriminatorType;
import javax.persistence.DiscriminatorValue;
import javax.persistence.Entity;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import com.github.braully.constant.Attr;
import com.github.braully.constant.Attrs;
import com.github.braully.util.UtilDate;
import com.github.braully.util.UtilValidation;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import javax.money.CurrencyUnit;
import javax.money.MonetaryAmount;
import javax.persistence.CascadeType;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import lombok.Getter;
import lombok.Setter;

@Entity
@Getter
@Setter
@Table(schema = "financial")
@DiscriminatorValue("0")
@DiscriminatorColumn(discriminatorType = DiscriminatorType.INTEGER, name = "type_id",
        columnDefinition = "smallint default '0'", length = 1)
public class AccountTransaction extends AbstractMigrableEntity
        implements Serializable, Comparable<AccountTransaction>, IOrganiztionEntityDependent {

    public static final CurrencyUnit CURRENCY_DEFAULT = Money.DEFAULT_CURRENCY;

    //    @ManyToOne(targetEntity = Organization.class)
    //    protected Organization organization;
    @ManyToOne(targetEntity = FinancialAccount.class)
    protected FinancialAccount financialAccount;

    @ManyToOne(targetEntity = Account.class)
    protected Account account;

    @ManyToOne(targetEntity = Partner.class)
    protected Partner partner;

    @Basic
    protected String observation;

    @Basic
    protected String memo;

    @Basic
    @Temporal(javax.persistence.TemporalType.DATE)
    protected Date datePrevist;

    @Basic
    @Temporal(javax.persistence.TemporalType.TIMESTAMP)
    protected Date dateExecuted;

    @Basic
    @Attrs({
        @Attr({"converter", "converterMonetaryBigDecimal"}),
        @Attr({"type", "money"})
    })
    protected BigDecimal debitTotal;

    @Basic
    @Attrs({
        @Attr({"converter", "converterMonetaryBigDecimal"}),
        @Attr({"type", "money"})
    })
    protected BigDecimal creditTotal;

    @Basic
    protected String typeMethod;

    @Basic
    protected String typeOperation;

    @Basic
    protected String typeTransaction;

    @Basic
    @Attrs({
        @Attr({"converter", "converterMonetaryBigDecimal"}),
        @Attr({"type", "money"})
    })
    protected BigDecimal valueExecuted;

    @Basic
    @Attr({"converter", "converterMonetaryBigDecimal"})
    protected BigDecimal actualBalance;

    @Attr("hidden")
    @ManyToOne(targetEntity = InfoExtra.class)
    protected InfoExtra infoExtra;

    @ManyToOne(targetEntity = AccountTransaction.class)
    protected AccountTransaction parentTransaction;

    @OneToMany(mappedBy = "parentTransaction", cascade = CascadeType.ALL)
    protected Set<AccountTransaction> childTransactions;

    @Transient
    protected MonetaryAmount total;

    @Attr(name = "label", value = "Situação")
    @Transient
    protected TransactionSituation situation;

    @Attr("hidden")
    @Basic
    protected String status;

    public AccountTransaction() {

    }

    public TransactionSituation getSituation() {
        try {
            if (situation == null) {
                if (UtilValidation.isNotNull(dateExecuted, valueExecuted)) {
                    situation = TransactionSituation.EXECUTED;
                    if (this.account.isCredit()) {
                        situation = TransactionSituation.RECEIVED;
                    } else if (this.account.isDebit()) {
                        situation = TransactionSituation.PAIDOUT;
                    }
                } else if (UtilValidation.isNotNull(datePrevist)) {
                    situation = TransactionSituation.PENDING;
                    if (UtilDate.isAntesHoje(datePrevist)) {
                        situation = TransactionSituation.EXPIRED;
                    }
                }
            }
        } catch (Exception e) {

        }
        return situation;
    }

    //Cached total
    public MonetaryAmount getTotal() {
        if (total == null) {
            Money tmp = new Money();
            tmp = tmp.adicionaValorAbsoluto(creditTotal);
            tmp = tmp.subtraiValorAbsoluto(debitTotal);
            if (childTransactions != null) {
                for (AccountTransaction at : childTransactions) {
                    tmp = tmp.adicionaValorAbsoluto(at.creditTotal);
                    tmp = tmp.subtraiValorAbsoluto(at.debitTotal);
                }
            }
            total = tmp;
        }
        return total;
    }

    @Override
    public boolean equals(Object obj) {
        if (super.equals(obj)) {
            if (this.id == null) {
                final AccountTransaction other = (AccountTransaction) obj;
                if (!Objects.equals(this.memo, other.memo)) {
                    return false;
                }
            }
        }
        return true;
    }

    @Attr(name = "organization", value = "financialAccount.organization")
    public Organization getOrganization() {
        try {
            if (this.financialAccount != null) {
                return this.financialAccount.organization;
            }
        } catch (Exception e) {
            logutil.warn("Fail on load organization", e);
        }
        return null;
    }

    @Override
    public int compareTo(AccountTransaction o) {
        try {
            return this.id.compareTo(o.id);
        } catch (Exception e) {
            return 0;
        }
    }

    public void addChildTransaction(AccountTransaction discount) {
        if (this.childTransactions == null) {
            this.childTransactions = new HashSet<>();
        }
        discount.setParentTransaction(this);
        this.childTransactions.add(discount);
    }

    public void setPartnerIfNull(Partner partner) {
        if (this.partner == null) {
            this.partner = partner;
        }
    }

    public Map<String, Object> getMapAllProps() {
        Map<String, Object> map = new HashMap<>();
        map.putAll(cache().map);
        try {
            if (infoExtra != null) {
                map.putAll(infoExtra.getMapAllProps());
            }
        } catch (Exception e) {
            logutil.error("Fail map all properties", e);
        }
        return map;
    }

    //For legacy
    public void setContaBancaria(FinancialAccount conta) {
        this.financialAccount = conta;
    }

    public void setData(Date datePosted) {
        this.dateExecuted = datePosted;
    }

    public void setDescricao(String memo) {
        this.memo = memo;
    }

    public void setValor(BigDecimal valor) {
        this.valueExecuted = valor;
    }

    public void setCodigo(String transId) {
        this.uniqueCode = transId;
    }
}
