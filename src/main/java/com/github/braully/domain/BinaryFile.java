//
// This file was generated by the JPA Modeler
//
/* MIT License
* 
* Copyright (c) 2021 Braully Rocha
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

package com.github.braully.domain;

import com.github.braully.constant.Attr;
import com.github.braully.util.UtilValidation;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.Serializable;
import java.util.Date;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.DiscriminatorColumn;
import javax.persistence.DiscriminatorType;
import javax.persistence.DiscriminatorValue;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import lombok.Getter;
import lombok.Setter;

@Entity
@Getter
@Setter
@Table(schema = "base")
@DiscriminatorValue("0")
@DiscriminatorColumn(discriminatorType = DiscriminatorType.INTEGER, name = "type_id",
        columnDefinition = "smallint default '0'", length = 1)
public class BinaryFile extends AbstractStatusEntity implements Serializable {

    @ManyToOne
    protected Organization organization;

    @ManyToOne
    protected UserLogin userLogin;

    @Basic
    protected String description;

    @Basic
    protected String name;

    @Basic
    protected String type;

    @Basic
    protected String subtype;

    @Attr("hidden")
    @ManyToOne(targetEntity = InfoExtra.class)
    protected InfoExtra infoExtra;

    @Temporal(TemporalType.TIMESTAMP)
    @Basic
    @Column(columnDefinition = "TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
    protected Date date;

    @Basic(fetch = FetchType.LAZY)
    @Column(columnDefinition = "bytea")
    protected byte[] fileBinary;

    @Basic
    protected String md5;

    @Basic
    protected String pathLocal;

    @Basic
    protected String pathCloud;

    @Basic
    protected String pathLog;

    @Enumerated
    @Basic
    protected StatusExecutionCycle statusExecution;

    public boolean isReady() {
        return this.statusExecution == StatusExecutionCycle.READY;
    }

    public String getExtensaoArquivo() {
        String ret = null;
        if (this.name != null) {
            String name = this.name.toLowerCase();
            ret = name.substring(name.lastIndexOf('.') + 1, name.length());
        }
        return ret;
    }

    public byte[] getArquivo() {
        return fileBinary;
    }

    public void setNome(String nomeArquivo) {
        this.name = nomeArquivo;
    }

    public String getNome() {
        return this.name;
    }

    @Override
    protected String preToString() {
        if (UtilValidation.isStringValid(description)) {
            return description;
        }
        return this.name;
    }

    public InputStream getStream() {
        InputStream stream = null;
        if (pathLocal != null) {
            try {
//                stream = UtilIO.loadStreamFromFilePath(pathLocal);
            } catch (Exception e) {
                throw new IllegalStateException("Fail on open stream: " + pathLocal, e);
            }
        } else if (fileBinary != null) {
            stream = new ByteArrayInputStream(fileBinary);
        }
        return stream;
    }
}
